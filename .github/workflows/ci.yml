name: CI

on:
  pull_request:
  push:
    branches:
      - 'main'

jobs:
  unit_tests:
    name: "Unit tests"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ^1.22

      - name: Test
        run: go test -v -cover -coverprofile=coverage.txt -covermode=count -mod=readonly ./...

      - name: Archive code coverage results
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage
          path: coverage.txt

  code_coverage:
    name: "Code coverage report"
    runs-on: ubuntu-latest
    needs: unit_tests
    env:
      GH_REPO: ${{ github.repository }}
      GH_TOKEN: ${{ github.token }}
    steps:
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ^1.22

      - name: Install go-coverage-report
        run: |
          go install github.com/fgrosse/go-coverage-report@v0.1.0
          which go-coverage-report

      - name: Determine changed files
        id: changed-files
        uses: tj-actions/changed-files@aa08304bd477b800d468db44fe10f6c61f7f7b11 # v42.1.0
        with:
          write_output_files: true
          json: true
          files: |
            **.go
          files_ignore: |
            **_test.go
            vendor/**

      - name: Download code coverage results from current run
        uses: actions/download-artifact@v4
        with:
          name: code-coverage
          path: .github/outputs

      - name: Rename code coverage results file from current run
        run: |
          mv .github/outputs/coverage.txt .github/outputs/new-coverage.txt

      - name: Determine last successful run on the target branch
        run: |
          LAST_SUCCESSFUL_RUN_ID=$(gh run list --status=success --branch=main --workflow=CI --event=push --json=databaseId --limit=1 -q '.[] | .databaseId')
          if [ -z "$LAST_SUCCESSFUL_RUN_ID" ]; then
            echo "No successful run found on the target branch"
            exit 1
          else
            echo "Last successful run on the target branch: $LAST_SUCCESSFUL_RUN_ID"
          fi

      - name: Download code coverage results from target branch
        run: |
          gh run download $LAST_SUCCESSFUL_RUN_ID --name=code-coverage --dir=.github/outputs
          mv .github/outputs/coverage.txt .github/outputs/old-coverage.txt

      - name: Compare code coverage results
        run: |
          go-coverage-report \
            -prefix=github.com/fgrosse/prioqueue \
            .github/outputs/old-coverage.txt \
            .github/outputs/new-coverage.txt \
            .github/outputs/all_changed_files.json \
          > coverage-comment.md

      - name: Comment on pull request
        run: |
          COMMENT_ID=$(gh api repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments -q '.[] | select(.user.login=="github-actions[bot]" and (.body | test("Coverage Î”")) )' | head -n 1)
          if [ -z "$COMMENT_ID" ]; then
            echo "Creating new coverage report comment"
          else
            echo "Replacing old coverage report comment (ID: $COMMENT_ID)"
            gh api -X DELETE repos/${{ github.repository }}/issues/comments/$COMMENT_ID
          fi

          gh pr comment ${{ github.event.number }} --body-file=coverage-comment.md
